#!/usr/bin/env ruby

# This script manages selected and installed packages. It can be configured
# with the `~/.config/toolkit` file, which will be autogenerated if it is not
# found when this script is run. An alternate config location can be specified
# with the `TOOLKIT_CONFIG` environment variable.
#
# Author:: Greg Look

require 'optparse'
require 'pathname'

SCRIPT_NAME = File.basename($0)
TOOLKIT_ROOT = Pathname.new(__FILE__).realpath.dirname
PACKAGE_ROOT = TOOLKIT_ROOT + 'packages'

$: << TOOLKIT_ROOT + 'lib'

require 'toolkit'

# set default options
$mount = Pathname.new(ENV['HOME'])
$config_path = Pathname.new(ENV['TOOLKIT_CONFIG'] || (ENV['HOME'] + '/.config/toolkit'))
#$colorize = true TODO
$verbose = false

# parse command-line options
options = OptionParser.new do |opts|
  opts.banner = "Usage: #{SCRIPT_NAME} [options] [action] [arguments ...]"
  opts.separator ""
  opts.separator "Options:"
  opts.on('-c', "--config FILE", "Set config file location (default: #{$config_path})") {|file| $config_path = Pathname.new(file) }
  opts.on('-m', "--mount DIR", "Set location to install toolkit to (default: #{$mount})") {|dir| $mount = Pathname.new(dir) }
  opts.on('-v', "--verbose", "Display additional information") { $verbose = true }
  opts.on('-h', "--help", "Display usage information") { puts opts; exit }
  opts.separator ""
  opts.separator "Actions:"
  opts.separator "    show    - prints information about selected and installed packages (default action)"
  opts.separator "    enable  - selects the named packages for installation"
  opts.separator "    disable - disables installation of the named packages"
  opts.separator "    reset   - resets the named packages' selection state"
  opts.separator "    build   - builds links to the selected package files"
end
options.parse!

# helper method to report failures
def fail(msg, code=1)
  STDERR.puts msg
  exit code
end

# initialize toolkit components
$mount = $mount.realpath.freeze
$config = Toolkit::Config.new($config_path)
$packages = Toolkit.load_packages(PACKAGE_ROOT)

# determine action
$action = ARGV.empty? && 'show' || ARGV.shift.downcase

case $action
when 'debug'
  puts "Toolkit object:"
  puts inspect
  puts ""
  puts "Links:"
  length = $config.links.keys.map{|path| path.length }.max
  $config.links.keys.sort.each do |path|
    puts "%-#{length}s -> %s" % [path, $config.links[path]]
  end

when 'show'
  if $verbose
    puts "Toolkit mounted at: #{$mount}"
    puts "Configuration file: #{$config.path}"
    puts "Package set root:   #{PACKAGE_ROOT}"
    puts ""
  end

  if $packages.empty?
    puts "It looks like you don't have any package sets installed!"
    puts "Try cloning some into #{PACKAGE_ROOT}"
  else
    indent = "  "
    ns_width = $packages.values.map{|package| package.namespace.length }.max
    name_width = $packages.values.map{|package| package.name.length }.max
    ns_name_width = ns_width + 1 + name_width

    # TODO: improve/colorize this
    puts "#{indent}%#{ns_name_width}s I A S" % "Package"
    puts "#{indent}%#{ns_name_width}s -----" % ('-' * ns_name_width)
    $packages.keys.sort.each do |ns_name|
      package = $packages[ns_name]
      puts "#{indent}%#{ns_width}s/%-#{name_width}s %s %s %s" % [
        package.namespace,
        package.name,
        $config.installed?(ns_name) && '*' || ' ',
        package.active? && '*' || ' ',
        $config.selected?(ns_name).nil? && ' ' || $config.selected?(ns_name) && 'Y' || 'N'
      ]
    end
  end

when 'enable', 'disable', 'reset'
  fail "Usage: #{SCRIPT_NAME} #{$action} <package> [package ...]" if ARGV.empty?

  selection_value = case $action
                    when 'enable' then true
                    when 'disable' then false
                    else nil end

  ARGV.each do |name|
    if $packages.include?(name)
      $config.selected[name] = selection_value
      change = selection_value.nil? && "setting cleared" || selection_value && "enabled" || "disabled"
      puts "Package %s %s" % [name, change] if $verbose
    else
      STDERR.puts "No package named '#{name}' found"
    end
  end

  $config.save!

when 'build'
  Toolkit.build! PACKAGE_ROOT, $config, $packages, $mount
  $config.save!

else
  fail "Unknown action '#{$action}', try: show, enable, disable, default, build", 2
end
