#!/usr/bin/env ruby

# This script installs the toolkit files by symlinking to them from the
# user's home directory. It can be configured with the ~/.config/toolkit file,
# which will be autogenerated if it is not found when this script is run.
#
# Author:: Greg Look

require 'optparse'
require 'pathname'

SCRIPT_NAME = File.basename($0)
TOOLKIT_ROOT = Pathname.new(__FILE__).realpath.dirname
$: << TOOLKIT_ROOT + 'lib'

require 'toolkit'

# helper method to report failures
def fail(msg)
  STDERR.puts msg
  exit 1
end

# default options
$options = {
  :config => Pathname.new(ENV['HOME']) + '.config/toolkit',
  :target => Pathname.new(ENV['HOME'])
}

# parse command-line options
options = OptionParser.new do |opts|
  opts.banner = "Usage: #{SCRIPT_NAME} [options] [action] [arguments+]"
  opts.separator ""
  opts.separator "Options:"
  opts.on('-c', "--config FILE", "Set config file location (default: #{$options[:config]})") {|file| $options[:config] = file }
  opts.on('-t', "--target DIR", "Set location to install toolkit to (default: #{$options[:target]})") {|dir| $options[:target] = dir }
  opts.on('-h', "--help", "Display usage information") { puts opts; exit }
  opts.separator ""
  opts.separator "Actions:"
  opts.separator "    show                 - prints information about selected and installed packages (default action if none given)"
  opts.separator "    enable <package(s)>  - selects the named packages for installation"
  opts.separator "    disable <package(s)> - disables installation of the named packages"
  opts.separator "    default <package(s)> - resets the named packages' selection state"
  opts.separator "    build                - builds links to the selected package files"
end
options.parse!

# initialize toolkit
$manifest = Toolkit::Manifest.new(TOOLKIT_ROOT + 'packages')
$config   = Toolkit::Config.new($options[:config])
$toolkit  = Toolkit.new($options[:target], $manifest, $config)

# get action
$action = ARGV.empty? && 'show' || ARGV.shift.downcase

case $action
when 'debug'
  $toolkit.debug

when 'show'
  $toolkit.show

when 'enable'
  fail "Usage: #{SCRIPT_NAME} enable <package>" if ARGV.empty?
  ARGV.each {|package| $toolkit.select package, true }
  $toolkit.save
  $toolkit.show

when 'disable'
  fail "Usage: #{SCRIPT_NAME} disable <package>" if ARGV.empty?
  ARGV.each {|package| $toolkit.select package, false }
  $toolkit.save
  $toolkit.show

when 'default'
  fail "Usage: #{SCRIPT_NAME} default <package>" if ARGV.empty?
  ARGV.each {|package| $toolkit.select package, nil }
  $toolkit.save
  $toolkit.show

when 'build'
  $toolkit.update

else
  fail "Unknown action '#{$action}', try: show, enable, disable, default, build"
end
